Folder structure

Food/
|
â”œâ”€â”€ Server/
â”‚   â”œâ”€â”€ config/
â”‚   â”‚   â””â”€â”€ db.js                 # Database connection
â”‚   â”œâ”€â”€ controllers/
â”‚   â”‚   â””â”€â”€ authController.js     # Controller for login
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â””â”€â”€ userModel.js          # User model and database logic
â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â””â”€â”€ authRoutes.js         # Routes for login
â”‚   â”œâ”€â”€ middleware/
â”‚   â”‚   â””â”€â”€ authMiddleware.js     # Middleware for authentication
â”‚   â”œâ”€â”€ server.js                 # Entry point for the server (Express app)
â”‚   â”œâ”€â”€ .env                      # Environment variables
â”‚   â”œâ”€â”€ package.json              # Backend dependencies
â”‚   â”œâ”€â”€ docker-compose.yml        # Docker Compose configuration
â”‚   â”œâ”€â”€ Dockerfile                # Dockerfile for backend
â”‚   
â””â”€â”€ FoodfrontEnd/                 # React frontend (built with Vite)
    â”œâ”€â”€ public/
    â”œâ”€â”€ src/
    â”œâ”€â”€ package.json              # Frontend dependencies
    â”œâ”€â”€ vite.config.js            # Vite configuration
    â”œâ”€â”€ Dockerfile                # Dockerfile for building the frontend with Nginx
    â””â”€â”€ dist/                     # Folder where production build will be stored (Nginx will serve this)


â”œâ”€â”€ docker-compose.yml        # Docker Compose configuration

Do the documentation
01/19 - Login and Registration to be developed and the home page aswell - not completed due 4 days
01/23 - docker yml file is installed
01/28 - Start on first userstory - Login and register


02/03
Now you know exactly what you are coding and why! ðŸŽ¯

    You connected to MySQL âœ…
    You created models for users âœ…
    You handled authentication logic âœ…
    You built API routes âœ…
    You tested login and registration in Postman âœ…

Now you can move on to protecting routes and integrating with the frontend. ðŸš€

Steps for Frontend Development:

    Set Up Routing â€“ Install react-router-dom to handle navigation.
    Create Authentication Pages â€“ Build Login and Register components.
    Set Up API Calls â€“ Use axios or fetch to connect the frontend with your backend.
    State Management â€“ Manage authentication state using useContext or Redux.
    Protect Routes â€“ Restrict access to authenticated users using Private Routes.
    UI Design â€“ Use a CSS framework (Tailwind, Bootstrap) or custom styling.